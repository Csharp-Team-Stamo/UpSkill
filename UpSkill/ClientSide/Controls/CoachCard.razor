@using UpSkill.Infrastructure.Models.Coaches
<div class="card custom-coach-card container mb-5" style="width: 18rem;">
    <img class="card-img-top img-background" src="/images/coach.png" alt="Card image cap">
    <div class="card-body">
        <div class="row">
            <div class="coach-profession col-6">
                @Coach.CategoryName
            </div>
            <div class="coach-name col-6 text-right">
                @Coach.FullName
            </div>
        </div>
        <div class="row">
            <div class="coah-price col-6">
                @Coach.PricePerSession.ToString("####")€ per person
            </div>
            <div class="col-6 text-right">
                <img class="coach-company-logo" src="@Coach.CompanyLogoUrl" />
            </div>
        </div>
        @if (user.IsAuthenticated().Result)
        {
            if (IsCoachAdded())
            {
                <div class="text-center">
                    <button @onclick="@(() =>AddCoach(Coach.Id, OwnerId))" class="coach-btn"><span class="coach-btn-text">Add</span></button>
                </div>
            }
            else
            {
                <div class="text-center">
                    <button @onclick="@(() =>RemoveCoach(Coach.Id, user.Id().Result))" class="coach-btn"><span class="coach-btn-text">Remove</span></button>
                </div>
            }
        }
    </div>
</div>


@code {

    [Parameter]
    public CoachInListCatalogModel Coach { get; set; }

    [Parameter]
    public string OwnerId { get; set; }

    [Parameter]
    public ICollection<string> CoachIdsCollection { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> user { get; set; }

    [Parameter]
    public EventCallback<CoachesListingCatalogModel> UpdatedCoachesListingCatalogModel { get; set; }

    [Parameter]
    public EventCallback<CoachesListingCatalogModel> UpdatedOwnerCoachesListingCatalogModel { get; set; }



    private async Task AddCoach(string coachId, string ownerId)
    {
        var userId = user.Id().Result;

        var coachOwnerIdResponse = await Client.PostAsJsonAsync($"/Coaches/AddCoachInOwnerCoachesCollectionAsync?coachId={coachId}&ownerId={ownerId}", string.Empty);

        await UpdatedCoachesListingCatalogModel.InvokeAsync(await Client.GetFromJsonAsync<CoachesListingCatalogModel>($"/coaches/GetAll?userId={userId}"));

    }


    private async Task RemoveCoach(string coachId, string userId)
    {
        await Client.DeleteAsync($"/Coaches/RemoveCoachFromOwnerCoachCollection?coachId={coachId}&userId={userId}");

        await UpdatedCoachesListingCatalogModel.InvokeAsync(await Client.GetFromJsonAsync<CoachesListingCatalogModel>($"/coaches/GetAll?userId={userId}"));

        await UpdatedOwnerCoachesListingCatalogModel.InvokeAsync(await Client.GetFromJsonAsync<CoachesListingCatalogModel>($"/coaches/GetAllByOwnerId?userId={userId}"));
    }

    private bool IsCoachAdded()
    {
        return CoachIdsCollection.FirstOrDefault(x => x == Coach.Id) == null;
    }

}
