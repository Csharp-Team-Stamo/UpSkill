<div class="card custom-course-card container mb-5" style="width: 18rem; background-color: @backgroundColor">
    <div @onclick="ShowPopup" class="card-img-top course-img-top-custom">
        <img class="img-custom" src="@Course.ImageUrl" />
        <div class="course-title-in-image">@Course.Name</div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="course-profession col-6">
                @Course.CategoryName
            </div>
            <div class="course-name col-6 text-right">
                @Course.AuthorFullName
            </div>
        </div>
        <div class="row">
            <div class="course-price col-6">
                @Course.PricePerPerson.ToString("##.##")€ per person
            </div>
            <div class="col-6 text-right">
                <img class="course-company-logo" src="@Course.CompanyLogoUrl" />
            </div>
        </div>
        @if (user.IsAuthenticated().Result && user.Role().Result == GlobalConstants.BusinessOwnerRoleName)
        {
            if (IsCourseAdded())
            {
                <div class="text-center">
                    <button @onclick="@(() =>RemoveCourse(Course.Id, user.OwnerId().Result))" class="course-btn"><span class="course-btn-text">Remove</span></button>
                </div>
            }
            else
            {
                <div class="text-center">
                    <button @onclick="@(() =>AddCourse(Course.Id, OwnerId))" class="course-btn"><span class="course-btn-text">Add</span></button>
                </div>
            }
        }

        else if (
            user.Role().Result == GlobalConstants.EmployeeRoleName &&
            !NavigationManager.Uri.Contains("Courses-catalog"))
        {
            if (isEmployeeEnrolledToCourse)
            {
                <div class="text-center">
                    <button @onclick="GoToCoursesDetails" class="course-btn"><span class="course-btn-text">Continue</span></button>
                </div>
            }
            else
            {
                <div class="text-center">
                    <button @onclick="ShowPopup" class="course-btn"><span class="course-btn-text">Enroll</span></button>
                </div>
            }
        }
    </div>
</div>


@* Modal *@
@if (show)
{
    <CourseDescriptionModal CourseId="Course.Id" SetShow="SetShowValue" IsEmployeeEnrolledToCourse="SetIsEmployeeEnrolledToCourse" BackgroundColor="SetBackgroundColor" />
}


@code
{
    private bool isEmployeeEnrolledToCourse;

    private bool show = false;

    private string backgroundColor;

    [CascadingParameter]
    public Task<AuthenticationState> user { get; set; }

    [Parameter]
    public CourseInListCatalogModel Course { get; set; }

    [Parameter]
    public string OwnerId { get; set; }

    [Parameter]
    public ICollection<int> CoursesIdsCollection { get; set; }

    [Parameter]
    public EventCallback<CoursesListingCatalogModel> UpdatedCoursesListingCatalogModel { get; set; }

    [Parameter]
    public EventCallback<CoursesListingCatalogModel> UpdatedOwnerCoursesListingCatalogModel { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (user.Role().Result == GlobalConstants.EmployeeRoleName)
        {
            isEmployeeEnrolledToCourse = await Client.GetFromJsonAsync<bool>($"Employees/IsEmployeeEnrolledToCourse?appUserId={user.Id().Result}&courseId={Course.Id}");

            if (isEmployeeEnrolledToCourse)
            {
                backgroundColor = "#EAF0FF";
            }
            else
            {
                backgroundColor = "#fff";
            }
        }
        else
        {
            backgroundColor = "#fff";
        }
    }

    private void ShowPopup()
    {
        show = true;
    }

    private void SetShowValue(bool value)
    {
        show = value;
    }

    private bool IsCourseAdded()
    {
        return CoursesIdsCollection.FirstOrDefault(x => x == Course.Id) != 0;
    }


    private async Task AddCourse(int courseId, string ownerId)
    {
        await CoursesService.AddCourseInOwnerCoursesCollectionAsync(courseId, ownerId);
        await UpdatedCoursesListingCatalogModel.InvokeAsync(await CoursesService.GetAllAsync(ownerId));
    }

    private async Task RemoveCourse(int courseId, string ownerId)
    {
        await CoursesService.RemoveCourseFromOwnerCoursesCollectionAsync(courseId, ownerId);
        await UpdatedCoursesListingCatalogModel.InvokeAsync(await CoursesService.GetAllAsync(ownerId));
        await UpdatedOwnerCoursesListingCatalogModel.InvokeAsync(await CoursesService.GetAllByOwnerIdAsync(ownerId));
    }

    private void SetIsEmployeeEnrolledToCourse(bool value)
    {
        isEmployeeEnrolledToCourse = value;
    }

    private void SetBackgroundColor(string value)
    {
        backgroundColor = value;
    }

    private void GoToCoursesDetails()
    {
        NavigationManager.NavigateTo("/watch/course");
    }
}
