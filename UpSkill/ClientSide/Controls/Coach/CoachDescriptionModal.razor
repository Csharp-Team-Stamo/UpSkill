@using UpSkill.Infrastructure.Models.Coach
@inject IJSRuntime Js

@if (coach == null)
{
    <div class="spinner"></div>
}
else
{
    <div class="modal fade show container modal-custom" style="display:block; background-color: rgba(10,10,10,.8);"
         aria-modal="true">
        <div class="modal-dialog">
            <div class="modal-body">
                <div class="row modal-header-custom">
                    <div class="course-title-text">@coach.CategoryName.ToUpper()</div>
                    <div @onclick="ClosePopup" class="close header-btn" data-dismiss="modal" aria-label="Close">
                        <span style="font-size: 2em" aria-hidden="true">&times;</span>
                    </div>
                    <img src="@coach.AvatarImgUrl" class="avatar">
                    <div class="coach-info-div">
                        <div class="coach-div">Coach</div>
                        <div class="coach-name-div">@coach.FullName</div>
                        <div class="company-div">@coach.Company</div>
                    </div>
                </div>
                <div class="video-container">
                    <iframe src="@coach.VideoUrl" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                    <div class="session-includes-div">This session includes</div>

                    <div class="discussion-div">
                        <img style="width: 4%; margin-right: 3%" src="images/coachDescriptionModal/discussion-time-img.svg" />
                        @coach.DiscussionDurationInMinutes minutes discussion
                    </div>
                    <div class="resources-div">
                        <img style="width: 3%; margin-right: 3%" src="images/coachDescriptionModal/download-img.svg" />
                        @coach.ResourcesCount downloadable resources
                    </div>
                    <div class="access-div">
                        <img style="width: 3%; margin-right: 3%" src="images/coachDescriptionModal/infinity-img.svg" />
                        Full lifetime access
                    </div>
                    <div class="mobile-div">
                        <img style="width: 3%; margin-right: 3%" src="images/coachDescriptionModal/mobile-img.svg" />
                        Access on mobile
                    </div>

                    @if (user.IsAuthenticated().Result && user.Role().Result == GlobalConstants.EmployeeRoleName &&
                    NavigationManager.Uri.EndsWith("Coaches") &&
                    !CoachDetails.IsCoachSessionPending &&
                    !CoachDetails.IsFeedbackNeeded)
                    {
                        <div class="book-btn" onclick="Calendly.initPopupWidget({ url: '@CalendlyAddSessionUri' }); return false;">
                            <div class="book-btn-text">Book</div>
                        </div>
                    }
                </div>

                <div class="col-6 description-div">
                    <div class="description-title-div">Session Description</div>
                    <div class="description-content-div">
                        @coach.SessionDescription
                    </div>
                </div>
                <div class="col-6 will-learn-div">
                    <div class="will-learn-title-div">What you will learn</div>
                    @foreach (var skill in coach.SkillsLearn.Split("#").ToList())
                    {
                        <div class="row will-learn-listing-row">
                            <div class="will-learn-in-list-content"><img src="images/coachDescriptionModal/green-listing-square.svg" /> @skill</div>
                        </div>
                    }
                </div>

            </div>
        </div>
    </div>
}

@code
{


    private CoachDescriptionModel coach;

    [Parameter]
    public string CalendlyAddSessionUri { get; set; }

    [Parameter]
    public EventCallback<bool> SetShow { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> user { get; set; }

    [Parameter]
    public CoachInListCatalogModel CoachDetails { get; set; }

    protected override async Task OnInitializedAsync()
    {
        coach = await Client
            .GetFromJsonAsync<CoachDescriptionModel>
            ($"/Coaches/GetByIdAsync?coachId={CoachDetails.Id}");
    }

    private void ClosePopup()
    {
        SetShow.InvokeAsync(false);
    }
}
