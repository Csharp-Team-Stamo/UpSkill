<div class="mx-auto">
    <table class="table table_custom table-borderless">
        <thead class="head">
            <tr>
                <th scope="col" colspan="2" class="text-center head-underline">
                    <span class="previous-month" @onclick="() => PreviousMonth()">
                        &lt;
                    </span>
                    <span>
                        @monthAsString
                    </span>
                    <span class="next-month" @onclick="() => NextMonth()">
                        &gt;
                    </span>
                </th>
            </tr>
            <tr class="">
                <th class="cell-header-left">
                    Coach Name
                </th>
                <th class="cell-header-right">
                    Sessions
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var coach in coaches)
            {
                <tr class=" underline">
                    <td class="cell-left">
                        @coach.Name
                    </td>
                    <td class="cell-right">
                        @coach.Sessions
                    </td>
                </tr>
            }
            <tr>
                @if (parameters.PageNumber >= MetaData.TotalPages && MetaData.TotalCount > parameters.PageSize)
                {
                    <td class="" colspan="3">
                        <span @onclick="ShowLess" style="color: #16D696; cursor:pointer">
                            Show less
                        </span>
                    </td>
                }
                else if (MetaData.TotalCount <= parameters.PageSize)
                {
                    <td colspan="3">
                        <span style="color: gray;">
                            Show more
                        </span>
                    </td>
                }
                else
                {
                    <td colspan="3">
                        <span @onclick="ViewMore" style="color: #16D696; cursor: pointer;">
                            Show more
                        </span>
                    </td>
                }
            </tr>
        </tbody>
    </table>
</div>


@code {

    [CascadingParameter]
    public Task<AuthenticationState> user { get; set; }

    private List<CoachDashboardStatItemModel> coaches = new();

    public MetaData MetaData { get; set; } = new MetaData();
    private TableEntityParameters parameters = new();

    private int month;
    private string monthAsString => DateTimeFormatInfo.InvariantInfo.GetMonthName(month);


    protected override async Task OnInitializedAsync()
    {
        month = DateTime.UtcNow.Month;

        var pagingResponse = await DashboardService
            .GetOwnerCoachesStatsAsync(user.OwnerId().Result, month.ToString(), parameters);
        coaches = pagingResponse.Items;
        MetaData = pagingResponse.MetaData;
        coaches = coaches.OrderBy(x => x.Name).ToList();

    }

    private async Task PreviousMonth()
    {
        month--;
        @if (month == 0)
        {
            month = 12;
        }

        parameters = new();
        var pagingResponse = await DashboardService
           .GetOwnerCoachesStatsAsync(user.OwnerId().Result, month.ToString(), parameters);
        coaches = pagingResponse.Items;
        MetaData = pagingResponse.MetaData;
        coaches = coaches.OrderBy(x => x.Name).ToList();
    }

    private async Task NextMonth()
    {
        month++;

        @if (month == 12)
        {
            month = 1;
        }

        parameters = new();
        var pagingResponse = await DashboardService
           .GetOwnerCoachesStatsAsync(user.OwnerId().Result, month.ToString(), parameters);
        coaches = pagingResponse.Items;
        MetaData = pagingResponse.MetaData;
        coaches = coaches.OrderBy(x => x.Name).ToList();
    }

    private async Task ViewMore()
    {
        if (parameters.PageNumber <= MetaData.TotalPages)
        {
            parameters.PageNumber = MetaData.CurrentPage + 1;
            var pagingResponse = await DashboardService
                .GetOwnerCoachesStatsAsync(user.OwnerId().Result, month.ToString(), parameters);
            coaches.AddRange(pagingResponse.Items);
            coaches = coaches.OrderBy(x => x.Name).ToList();
        }
    }

    private void ShowLess()
    {
        parameters.PageNumber = 1;
        MetaData.CurrentPage = 1;
        coaches = coaches
        .Take(MetaData.PageSize)
        .OrderBy(x => x.Name)
        .ToList();
    }
}