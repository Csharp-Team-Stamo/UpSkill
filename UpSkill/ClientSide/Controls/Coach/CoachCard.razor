@inject IJSRuntime Js;

<head>
    <link href="https://assets.calendly.com/assets/external/widget.css" rel="stylesheet">
</head>

<div class="card custom-coach-card container mb-5" style="width: 18rem; background-color: @BackgroundColor">
    <div @onclick="ShowPopup" class="card-img-top card-img-top-custom">
        <img class="img-custom" src="images/coach.png" />
    </div>
    <div class="card-body">
        <div class="row">
            <div class="coach-profession col-6">
                @Coach.CategoryName
            </div>
            <div class="coach-name col-6 text-right">
                @Coach.FullName
            </div>
        </div>
        <div class="row">
            <div class="coah-price col-6">
                @Coach.PricePerSession.ToString("##,##")€ per session
            </div>
            <div class="col-6 text-right">
                <img class="coach-company-logo" src="@Coach.CompanyLogoUrl" />
            </div>
        </div>
        @if (user.IsAuthenticated().Result
     && user.Role().Result == GlobalConstants.BusinessOwnerRoleName)
        {
            if (IsCoachAdded())
            {   //ToDo Should I delete it from the mapping table ' UpSkill.Data.Common.Models.EmployeeCourse.cs'  as well. Same thing and in CourseCard.razor

                <div class="text-center">
                    <button @onclick="@(() => ShowRemoveCoachPopup(true))" class="coach-btn"><span class="coach-btn-text">Remove</span></button>
                </div>
            }

            else
            {
                <div class="text-center">
                    <button @onclick="@(() =>AddCoach(Coach.Id))" class="coach-btn"><span class="coach-btn-text">Add</span></button>
                </div>
            }
        }

        else if (
            user.Role().Result == GlobalConstants.EmployeeRoleName
            && (NavigationManager.Uri.EndsWith("Coaches") || NavigationManager.Uri.EndsWith("Dashboard")))
        {
            <div class="text-center">
                @*<button href="" class="coach-btn " onclick="Calendly.initPopupWidget({ url: '@CalendlyPrefilledUriParams' }); return false;">New Slot</button>*@

                @if (Coach.IsCoachSessionPending)
                {
                    <button href="" class="coach-btn">Pending</button>
                }
                else if (Coach.IsFeedbackNeeded)
                {
                    <button href="" class="coach-btn feedback">Feedback</button>
                }

                else if (Coach.IsNotFirstCoachSession)
                {
                    <button href="" class="coach-btn " onclick="Calendly.initPopupWidget({ url: '@CalendlyPrefilledUriParams' }); return false;">New Slot</button>
                }

                else
                {
                    <button href="" class="coach-btn" @onclick="ShowPopup">Book</button>
                }

            </div>
        }

    </div>
</div>


@* Modal *@
@if (show)
{
    <CoachDescriptionModal CoachDetails="@Coach" SetShow="SetShowValue" CalendlyAddSessionUri="@CalendlyPrefilledUriParams" />
}

@if (showRemoveCoachModal)
{
    <RemoveCoachModal CoachId="@Coach.Id" RemoveCoach="RemoveCoach"  ShowRemoveModal="ShowRemoveCoachPopup" />
}

@code {

    public string CalendlyPrefilledUriParams { get; set; }

    private bool showRemoveCoachModal = false;


    private bool show = false;

    private bool showSessionModal = false;

    [Parameter]
    public string BackgroundColor { get; set; }


    [Parameter]
    public CoachInListCatalogModel Coach { get; set; }

    [Parameter]
    public ICollection<string> CoachIdsCollection { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> user { get; set; }

    [Parameter]
    public EventCallback<CoachesListingCatalogModel> UpdatedCoachesListingCatalogModel { get; set; }

    [Parameter]
    public EventCallback<CoachesListingCatalogModel> UpdatedOwnerCoachesListingCatalogModel { get; set; }

    [Parameter]
    public static EventCallback<bool> ReceivedResult { get; set; }

    //[JSInvokable]
    //public static async Task AddedSession(int statusCode)
    //{
    //    var instance = DotNetObjectReference.Create(this);

    //    if (statusCode == 200)
    //    {
    //        await ReceivedResult.InvokeAsync(true);
    //    }
    //}

    protected override void OnInitialized()
    {
        CalendlyPrefilledUriParams = Coach.CalendlyUrl + "?name=" + user.FullName().Result + "&email=" + user.Email().Result;

        if (user.IsAuthenticated().Result
        && user.Role().Result == GlobalConstants.BusinessOwnerRoleName
        && NavigationManager.Uri.EndsWith("Coaches-catalog"))
        {
            BackgroundColor = IsCoachAdded() ? "#EAF0FF" : "#FFFFFF";
        }
        else if (Coach.IsCoachSessionPending || Coach.IsNotFirstCoachSession)
        {
            BackgroundColor = "#EAF0FF";
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Js.InvokeAsync<bool>("addEventListener");
    }

    private async Task AddCoach(string coachId)
    {
        var ownerId = user.OwnerId().Result;
        await CoachesService.AddCoachInOwnerCoachesCollectionAsync(coachId, ownerId);
        await UpdatedCoachesListingCatalogModel.InvokeAsync(await CoachesService.GetAllAsync(ownerId));
        BackgroundColor = "#EAF0FF";

    }

    //public async void GiveFeedback()
    //{

    //}


    private async Task RemoveCoach(string coachId)
    {
        var ownerId = user.OwnerId().Result;

        await CoachesService.RemoveCoachFromOwnerCoachCollectionAsync(coachId, ownerId);
        await UpdatedCoachesListingCatalogModel.InvokeAsync(await CoachesService.GetAllAsync(ownerId));
        await UpdatedOwnerCoachesListingCatalogModel.InvokeAsync(await CoachesService.GetAllByOwnerIdAsync(ownerId));
        BackgroundColor = "#FFFFFF";
    }


    private void ShowRemoveCoachPopup(bool show)
    {
        showRemoveCoachModal = show;
    }

    private bool IsCoachAdded()
    {
        return CoachIdsCollection.FirstOrDefault(x => x == Coach.Id) != null;
    }

    private void ShowPopup()
    {
        show = true;
    }

    private void SetShowValue(bool value)
    {
        show = value;
    }

    private void ShowSessionModal()
    {
        showSessionModal = true;
    }


    private void SetShowSessionValue(bool value)
    {
        showSessionModal = value;
    }
}
