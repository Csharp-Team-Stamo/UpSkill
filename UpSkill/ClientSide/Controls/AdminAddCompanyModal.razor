@using UpSkill.Infrastructure.Models.Company

@*<h3>Admin Add Company</h3>*@

<div class="modal fade show" style="display:block; background-color: rgba(10,10,10,.8);"
     aria-modal="true">
    <div class="modal-dialog">
        <div class="modal-body">
            <div class="row modal-header-custom">
                <div class="add-company-text">Add Company</div>
                <div @onclick="ClosePopup" class="close header-btn" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </div>
                <div class="upload-csv-file-btn">
                    <div class="upload-csv-file-btn-text">
                        Upload CSV file
                    </div>
                </div>
            </div>
            <div>
                <EditForm Model="@companyInput" OnValidSubmit="@Create">
                    <DataAnnotationsValidator />
                    <InputText @bind-Value="companyInput.Name" placeholder="Company Name*"></InputText>
                    <ValidationMessage For="@(() => companyInput.Name)"></ValidationMessage>
                    <InputText @bind-Value="companyInput.Email" placeholder="Email"></InputText>
                    <ValidationMessage For="@(() => companyInput.Email)"></ValidationMessage>
                    <div class="row">
                        <button class="cancel-btn">
                            <div @onclick="ClosePopup" class="cancel-btn-text">
                                Cancel
                            </div>
                        </button>
                        <button type="submit" class="save-btn">
                            <div class="save-btn-text">
                                Add Company
                            </div>
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    private CompanyCreateInputModel companyInput = new();


    [Parameter]
    public EventCallback<bool> SetShow { get; set; }

    [Parameter]
    public EventCallback<IEnumerable<AdminCompanyListingModel>> GetUpdatedCompanies { get; set; }


    private void ClosePopup()
    {
        SetShow.InvokeAsync(false);
    }

    private async Task Create()
    {

        // var model = companyInput;

        // model.CompanyId = user.CompanyId().Result;
        // employeeCollection.Add(model);

        var response = await Client
            .PostAsJsonAsync<CompanyCreateInputModel>("/admin/company/create", companyInput);

        if(response.IsSuccessStatusCode)
        {
            var updatedClients = await Client
                .GetFromJsonAsync<IEnumerable<AdminCompanyListingModel>>
                ("/admin/statistics/getallclients");

            await GetUpdatedCompanies.InvokeAsync(updatedClients);
        }

        ClosePopup();

        DisplayToast(response);

    }

    //private ICollection<string> DeserializeEmails(HttpResponseMessage emailsForDeserialization)
    //{
    //    var emailsAsString = emailsForDeserialization.Content.ReadAsStringAsync().Result;

    //    var emailsAsCollection = JsonConvert.DeserializeObject<List<string>>(emailsAsString);

    //    return emailsAsCollection;
    //}

    private void DisplayToast(HttpResponseMessage responseMessage)
    {
        if(responseMessage.IsSuccessStatusCode)
        {
            ToastService.ShowSuccess($"Company {companyInput.Name} was added to DB.");
        }
        else
        {
            ToastService.ShowError($"Company {companyInput.Name} could not be added to DB.");
        }
    }
}
