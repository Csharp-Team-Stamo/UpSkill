<div class="modal fade show" style="display:block; background-color: rgba(10,10,10,.8);"
     aria-modal="true">
    <div class="modal-dialog">
        <div class="modal-body">
            <div class="row modal-header-custom">
                <div class="add-emp-text">Add Employees</div>
                <div @onclick="ClosePopup" class="close header-btn" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </div>
                <div class="upload-csv-file-btn">
                    <div class="upload-csv-file-btn-text">
                        Upload CSV file
                    </div>
                </div>
            </div>
            <div>
                <EditForm Model="@EmployeeFormModel" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <InputText @bind-Value="EmployeeFormModel.FullName" placeholder="Full Name*"></InputText>
                    <ValidationMessage For="@(() => EmployeeFormModel.FullName)"></ValidationMessage>
                    <InputText @bind-Value="EmployeeFormModel.Email" placeholder="Email Address*"></InputText>
                    <ValidationMessage For="@(() => EmployeeFormModel.Email)"></ValidationMessage>
                    <button @onclick="@(() => EmployeeFormModel.AddAnotherOneBtn = true)" type="submit" class="add-another-one-employee">
                        + Add another employee
                    </button>
                    <div class="row">
                        <button class="cancel-btn">
                            <div @onclick="ClosePopup" class="cancel-btn-text">
                                Cancel
                            </div>
                        </button>
                        <button @onclick="@(() => EmployeeFormModel.AddAnotherOneBtn = false)" type="submit" class="save-btn">
                            <div class="save-btn-text">
                                Save
                            </div>
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    private AddEmployeeFormModel EmployeeFormModel = new();
    private ICollection<AddEmployeeFormModel> employeeCollection = new List<AddEmployeeFormModel>();

    [CascadingParameter]
    public Task<AuthenticationState> user { get; set; }


    [Parameter]
    public EventCallback<bool> SetShow { get; set; }

    [Parameter]
    public EventCallback<ICollection<AddEmployeeFormModel>> GetUpdatedEmployees { get; set; }


    private void ClosePopup()
    {
        SetShow.InvokeAsync(false);
    }

    private async Task HandleValidSubmit()
    {

        var model = EmployeeFormModel;
        model.CompanyId = user.CompanyId().Result;
        employeeCollection.Add(model);


        if (EmployeeFormModel.AddAnotherOneBtn)
        {
            EmployeeFormModel = new();
        }
        else
        {
            var emailsFromResponseErrorResult = await EmployeesService.SaveCollectionInDbAsync(employeeCollection);
            await GetUpdatedEmployees.InvokeAsync(await EmployeesService.GetCollectionFromDbByCompanyIdAsync(user.CompanyId().Result));

            var emailsAsCollection = DeserializeEmails(emailsFromResponseErrorResult);

            ClosePopup();

            DisplayToast(emailsAsCollection);
        }

    }

    private ICollection<string> DeserializeEmails(HttpResponseMessage emailsForDeserialization)
    {
        var emailsAsString = emailsForDeserialization.Content.ReadAsStringAsync().Result;

        var emailsAsCollection = JsonConvert.DeserializeObject<List<string>>(emailsAsString);

        return emailsAsCollection;
    }

    private void DisplayToast(ICollection<string> notSavedEmails )
    {
        if (notSavedEmails.Any())
        {
            foreach (var email in notSavedEmails)
            {
                toastService.ShowError($"Employee with Full Name '{EmployeeFormModel.FullName}' is not saved because his Email '{email}' is already registered");
            }
        }
        var addedEmployeesCount = employeeCollection.Count - notSavedEmails.Count;

        if (addedEmployeesCount != 0)
        {
            var message = addedEmployeesCount > 1 ? $"{addedEmployeesCount}  Employees saved" : $"{addedEmployeesCount}  Employee saved";

            toastService.ShowSuccess(message);
        }
    }
}

