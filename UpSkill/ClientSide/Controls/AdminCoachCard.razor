@using UpSkill.Infrastructure.Models.Coach

<style>
    .coach-company-logo {
        max-width: 80%;
        max-height: 80%;
    }

    .coach-profession {
        font: normal bold 70% Montserrat;
        letter-spacing: 0.7px;
        color: #000000;
        opacity: 1;
    }

    .coach-name {
        font: 75% Montserrat;
        letter-spacing: 0.7px;
        color: #000000;
        opacity: 1;
    }

    .coah-price {
        font: 65% Montserrat;
        letter-spacing: 0.7px;
        color: #296CFB;
        opacity: 1;
    }

    .coach-btn {
        background: #296CFB 0% 0% no-repeat padding-box;
        border: none;
        margin-top: 1em;
        opacity: 1;
    }

    .coach-btn-text {
        font: 95% Montserrat;
        letter-spacing: 1.1px;
        color: #FFFFFF;
        opacity: 1;
    }

    .custom-coach-card {
        box-shadow: 0px 3px 10px #00000029;
    }

    .img-background {
        height: 90%;
        background: #1CC18A 0% 0% no-repeat padding-box;
        opacity: 1;
    }
</style>

<div class="card custom-coach-card container mb-5" style="width: 18rem;">
    <img class="card-img-top img-background" src="/images/coach.png" alt="Card image cap">
    <div class="card-body">
        <div class="row">
            <div class="coach-profession col-6">
                @Coach.CategoryName
            </div>
            <div class="coach-name col-6 text-right">
                @Coach.FullName
            </div>
        </div>
        <div class="row">
            <div class="coah-price col-6">
                @Coach.FormattedPrice€ per person
            </div>
            <div class="col-6 text-right">
                <img class="coach-company-logo" src="@Coach.CompanyLogoUrl" />
            </div>
        </div>

        @if (Coach.IsDeleted == false)
        {
            <div class="text-center">
                <button @onclick="@(() => RemoveCoach(Coach.Id))" class="coach-btn">
                <span class="coach-btn-text">Remove</span>
                </button>
            </div>
        }

        @*@if (user.IsAuthenticated().Result && user.Role().Result == GlobalConstants.BusinessOwnerRoleName)
        {
            if (IsCoachAdded())
            {
                <div class="text-center">
                    <button @onclick="@(() =>AddCoach(Coach.Id, OwnerId))" class="coach-btn"><span class="coach-btn-text">Add</span></button>
                </div>
            }
            else
            {
                <div class="text-center">
                    <button @onclick="@(() =>RemoveCoach(Coach.Id, user.OwnerId().Result))" class="coach-btn"><span class="coach-btn-text">Remove</span></button>
                </div>
            }
        }

        else if (
            user.Role().Result == GlobalConstants.EmployeeRoleName &&
            !NavigationManager.Uri.Contains("Coaches-catalog"))
        {
            <div class="text-center">
                <button @onclick="@(() =>AddNewEmployeeSession(Coach.Id, OwnerId))" class="coach-btn"><span class="coach-btn-text">New Slot</span></button>
            </div>
        }*@

    </div>
</div>

@code {
    [Parameter]
    public AdminCoachListingServiceModel Coach { get; set; }

    private async Task RemoveCoach(string coachId)
    {
        // await CoachesService.RemoveCoachFromOwnerCoachCollectionAsync(coachId, ownerId);

        // await UpdatedCoachesListingCatalogModel.InvokeAsync(await CoachesService.GetAllAsync(ownerId));

        // await UpdatedOwnerCoachesListingCatalogModel.InvokeAsync(await CoachesService.GetAllByOwnerIdAsync(ownerId));
    }
}
