@page "/Coaches-catalog"
@layout NoMenuLayout
@attribute [Microsoft.AspNetCore.Authorization.AllowAnonymous]

@using UpSkill.Infrastructure.Common.Pagination.Coaches


<CheckboxesPanel SortingTerms="Filter"></CheckboxesPanel>

@if (model == null)
{
    <div class="spinner"></div>
}
else
{
    <div class="row mt-5">

        <Virtualize ItemsProvider="LoadProducts" Context="coach">
            <CoachCard Coach="coach" CoachIdsCollection="@model.OwnerCoachCollectionIds" UpdatedCoachesListingCatalogModel="SetCoaches"></CoachCard>
        </Virtualize>
    </div>

}


@code {

    [CascadingParameter]
    public Task<AuthenticationState> user { get; set; }

    private CoachesListingCatalogModel model;

    private ICollection<CoachInListCatalogModel> coaches = new List<CoachInListCatalogModel>();


    //protected override async Task OnInitializedAsync()
    //{
    //    var ownerId = user.OwnerId().Result;

    //    model = await CoachesService.GetAllAsync(ownerId);

    //    coaches = model.Coaches.Items.ToList();
    //}

    public int TotalSize { get; set; }

    public CoachesParameters OnScroll { get; set; }

    private async ValueTask<ItemsProviderResult<CoachInListCatalogModel>> LoadProducts(ItemsProviderRequest request)
    {
        var productNum = Math.Min(request.Count, TotalSize - request.StartIndex);
        OnScroll.StartIndex = request.StartIndex;
        OnScroll.PageSize = productNum == 0 ? request.Count : productNum;

        var virtualizeResult = await CoachesService.GetAllAsync(user.OwnerId().Result, OnScroll);
        coaches = virtualizeResult.Coaches.Items;
        TotalSize = virtualizeResult.Coaches.TotalSize;

        return new ItemsProviderResult<CoachInListCatalogModel>(coaches, TotalSize);
    }

    private void SetCoaches(CoachesListingCatalogModel updatedModel)
    {
        model = updatedModel;
    }


    private void Filter(SortingTermsCoachesModel input)
    {
        if (input.Categories.Any() && input.Languages.Any())
        {
            coaches = model.Coaches.Items.Where(x => input.Categories.Contains(x.CategoryName) && input.Languages.Any(l => x.Languages.Contains(l))).ToList();
        }

        if (!input.Categories.Any())
        {
            FilterCoachesByLanguage(input);
        }

        if (!input.Languages.Any())
        {
            FilterCoachesByCategory(input);
        }
    }

    private void FilterCoachesByCategory(SortingTermsCoachesModel input)
    {
        if (input.Categories.Any())
        {
            coaches = model.Coaches.Items.Where(x => input.Categories.ToList().Contains(x.CategoryName)).ToList();
        }
        else
        {
            coaches = model.Coaches.Items;
        }
    }

    private void FilterCoachesByLanguage(SortingTermsCoachesModel input)
    {
        if (input.Languages.Any())
        {
            coaches = model.Coaches.Items.Where(x => input.Languages.Any(l => x.Languages.Contains(l))).ToList();
        }
        else
        {
            coaches = model.Coaches.Items;
        }
    }
}
