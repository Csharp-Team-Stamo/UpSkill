@page "/Coaches-catalog"
@layout NoMenuLayout
@attribute [Microsoft.AspNetCore.Authorization.AllowAnonymous]


<CheckboxesPanel SortingTerms="Filter"></CheckboxesPanel>

@if (model == null)
{
    <div class="spinner"></div>
}
else
{
    <div class="row mt-5">

        <Virtualize Items="coaches" Context="coach">
            <CoachCard Coach="coach" CoachIdsCollection="@model.OwnerCoachCollectionIds" UpdatedCoachesListingCatalogModel="SetCoaches"></CoachCard>
        </Virtualize>
    </div>

}


@code {

    [CascadingParameter]
    public Task<AuthenticationState> user { get; set; }

    private CoachesListingCatalogModel model;

    private ICollection<CoachInListCatalogModel> coaches = new List<CoachInListCatalogModel>();


    protected override async Task OnInitializedAsync()
    {
        var ownerId = user.OwnerId().Result;

        model = await CoachesService.GetAllAsync(ownerId);

        coaches = model.Coaches.ToList();
    }

    private void SetCoaches(CoachesListingCatalogModel updatedModel)
    {
        model = updatedModel;
    }


    private void Filter(SortingTermsCoachesModel input)
    {
        if (input.Categories.Any() && input.Languages.Any())
        {
            coaches = model.Coaches.Where(x => input.Categories.Contains(x.CategoryName) && input.Languages.Any(l => x.Languages.Contains(l))).ToList();
        }

        if (!input.Categories.Any())
        {
            FilterCoachesByLanguage(input);
        }

        if (!input.Languages.Any())
        {
            FilterCoachesByCategory(input);
        }
    }

    private void FilterCoachesByCategory(SortingTermsCoachesModel input)
    {
        if (input.Categories.Any())
        {
            coaches = model.Coaches.Where(x => input.Categories.ToList().Contains(x.CategoryName)).ToList();
        }
        else
        {
            coaches = model.Coaches;
        }
    }

    private void FilterCoachesByLanguage(SortingTermsCoachesModel input)
    {
        if (input.Languages.Any())
        {
            coaches = model.Coaches.Where(x => input.Languages.Any(l => x.Languages.Contains(l))).ToList();
        }
        else
        {
            coaches = model.Coaches;
        }
    }
}
