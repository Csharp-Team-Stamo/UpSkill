@page "/Coaches-catalog"
@layout NoMenuLayout
@attribute [Microsoft.AspNetCore.Authorization.AllowAnonymous]


<CoachCheckboxesPanel SortingTerms="Filter" />

@if (model == null)
{
    <div class="spinner"></div>
}
else
{
    <div class="row mt-5">
        @foreach (var coach in coaches)
        {
            var backgroundColor = "#FFFFFF";
            if (model.OwnerCoachCollectionIds.FirstOrDefault(x => x == coach.Id) != null && user.Role().Result == GlobalConstants.BusinessOwnerRoleName)
            {
                backgroundColor = "#EAF0FF";
            }

            <CoachCard Coach="coach" CoachIdsCollection="@model.OwnerCoachCollectionIds" UpdatedCoachesListingCatalogModel="SetCoaches" BackgroundColor="@backgroundColor" />
        }
    </div>

}


@code {

    [CascadingParameter]
    public Task<AuthenticationState> user { get; set; }

    private CoachesListingCatalogModel model;

    private ICollection<CoachInListCatalogModel> coaches = new List<CoachInListCatalogModel>();


    protected override async Task OnInitializedAsync()
    {
        var ownerId = user.OwnerId().Result;

        model = await CoachesService.GetAllAsync(ownerId);

        coaches = model.Coaches;
    }

    private void SetCoaches(CoachesListingCatalogModel updatedModel)
    {
        model = updatedModel;
    }


    private void Filter(SortingTermsCatalogsModel input)
    {
        if (input.Categories.Any() && input.Languages.Any())
        {
            coaches = model.Coaches.Where(x => input.Categories.Contains(x.CategoryName) && input.Languages.Any(l => x.Languages.Contains(l))).ToList();
        }

        if (!input.Categories.Any())
        {
            FilterCoachesByLanguage(input);
        }

        if (!input.Languages.Any())
        {
            FilterCoachesByCategory(input);
        }
    }

    private void FilterCoachesByCategory(SortingTermsCatalogsModel input)
    {
        coaches = input.Categories.Any() ? model.Coaches.Where(x => input.Categories.ToList().Contains(x.CategoryName)).ToList() : model.Coaches;
    }

    private void FilterCoachesByLanguage(SortingTermsCatalogsModel input)
    {
        coaches = input.Languages.Any() ? model.Coaches.Where(x => input.Languages.Any(l => x.Languages.Contains(l))).ToList() : model.Coaches;
    }
}
