@page "/Invoice"

@using UpSkill.Infrastructure.Models.Owner
@using UpSkill.ClientSide.Controls.Owner

@if (invoiceModel.TotalMonthlyAmount == 0)
{
    <div class="mx-auto">
        <p>@userName, there are currently no invoices on your account.</p>
    </div>
}
else
{
    <OwnerInvoiceStatus MonthNum="monthNum"></OwnerInvoiceStatus>

    <div class="mx-auto">
        <table class="table table_custom table-borderless">
            <thead class="head">
                <tr>
                    <th scope="col" colspan="3" class="text-center head-underline">
                        <span class="previous-month" @onclick="() => PreviousMonth()">
                            &lt;
                        </span>
                        <span>
                            @monthAsString
                        </span>
                        <span class="next-month" @onclick="() => NextMonth()">
                            &gt;
                        </span>
                    </th>
                </tr>
                <tr class="">
                    <th class="cell-header-left">
                        Course/Coach
                    </th>
                    <th class="text-left cell-header-center">
                        Date
                    </th>
                    <th class="cell-header-center">
                        Price
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var course in invoiceModel.MonthlyCoursesToPay)
                {
                    <tr class="border-bottom-0 underline">
                        <td class="text-left pl-4 font-weight-bold cell-left" style="color: #16D696;">
                            @course.CourseName
                        </td>
                        <td class="text-left pr-4 cell-right">
                            @course.IssueDate.ToString("dd.MM.yyyy")
                        </td>
                        <td>
                            @($"{course.Price:f0}")&euro;
                        </td>
                    </tr>
                }

                @foreach (var coach in invoiceModel.MonthlySessionsToPay)
                {
                    <tr class="border-bottom-0 underline">
                        <td class="text-left pl-4 font-weight-bold cell-left" style="color: #16D696;">
                            @coach.CoachName
                        </td>
                        <td class="text-left pr-4 cell-right">
                            @coach.IssueDate.ToString("dd.MM.yyyy")
                        </td>
                        <td>
                            @($"{coach.Price:f0}")&euro;
                        </td>
                    </tr>
                }
                <tr class="">
                    <td class="text-left pl-4 font-weight-bold cell-left">Total</td>
                    <td></td>
                    <td>@($"{invoiceModel.TotalMonthlyAmount:f0}")&euro;</td>
                </tr>
            </tbody>
        </table>
    </div>
}

@code {
    private OwnerInvoiceDetailsModel invoiceModel = new();

    private int monthNum;
    private DateTime currentDate => DateTime.UtcNow;
    private string monthAsString => DateTimeFormatInfo.InvariantInfo.GetMonthName(monthNum);

    [CascadingParameter]
    public Task<AuthenticationState> user { get; set; }

    public string userId => this.user.Id().Result;
    private string userName => this.user.FullName().Result;

    protected override async Task OnInitializedAsync()
    {
        // TODO get the OwnerId
        // var userId = this.user.Id().Result;

        monthNum = currentDate.Month;

        await GetInvoice(userId, monthNum);
    }

    private async Task GetInvoice(string userId, int monthNum)
    {
        this.invoiceModel = await this.Client
        .GetFromJsonAsync<OwnerInvoiceDetailsModel>
        ($"/ownerdashboard/GetInvoiceInfo/{userId}/{monthNum}");
    }

    async Task PreviousMonth()
    {
        if (monthNum == 1)
        {
            monthNum = 12;
        }
        else
        {
            monthNum--;
        }


        await GetInvoice(userId, monthNum);
        StateHasChanged();
    }

    async Task NextMonth()
    {
        if (monthNum == 12)
        {
            monthNum = 1;
        }
        else
        {
            monthNum++;
        }

        await GetInvoice(userId, monthNum);

        StateHasChanged();
    }
}
