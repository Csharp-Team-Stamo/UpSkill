@layout EmptyLayout
@page "/ForgotPassword"
@attribute [Microsoft.AspNetCore.Authorization.AllowAnonymous]
@using UpSkill.Infrastructure.Models.Account

@if (ShowErrors)
{
    @foreach (var error in Errors)
    {
        ToastService.ShowError(error);
    }

    ShowErrors = false;
}

<div class="wrapper">

    <div class="row" style="margin-right: unset">
        <div class="col-md-7 images">
            <div class="img-background">
                <img class="img-decoration" src="/images/registrationPage/clipart.svg" />
            </div>
        </div>

        <div class="col d-flex flex-column justify-content-center">
            <div class="brand">
                <img class="img-logo" src="/images/registrationPage/logo.svg" />
            </div>

            <h3>Request password reset.</h3>

            <div class="input_group mx-auto">
                <EditForm Model="model" OnValidSubmit="@SendEmailPasswordReset" class="">
                    <DataAnnotationsValidator />

                    <div class=" row">
                        <div class="col-md-10">
                            <InputText type="email" id="email" class="input_form" placeholder="Enter your email*" @bind-Value="model.Email" />
                            <ValidationMessage For="@(() => model.Email)" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <button type="submit" class="button_logout">Reset password</button>
                        </div>
                    </div>

                </EditForm>
            </div>
        </div>
    </div>
</div>

@code{
    public bool ShowErrors { get; set; }
    public IEnumerable<string> Errors { get; set; } = new List<string>();
    UserForgottenPasswordRequestModel model = new UserForgottenPasswordRequestModel();

    private async void SendEmailPasswordReset()
    {
        var response = await Client.PostAsJsonAsync("/Accounts/Request-reset-password", model);

        if (!response.IsSuccessStatusCode)
        {
            var resultAsString = response.Content.ReadAsStringAsync().Result;
            Errors = new List<string>() { (resultAsString) };
            Console.WriteLine(string.Join(" ", Errors));
            ShowErrors = true;
            StateHasChanged();
        }
        else
        {
            NavigationManager.NavigateTo("/Login");
        }
    }
}