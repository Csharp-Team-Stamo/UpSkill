@layout EmptyLayout
@page "/reset-password"
@attribute [Microsoft.AspNetCore.Authorization.AllowAnonymous]

@if (ShowErrors)
{
    @foreach (var error in Errors)
    {
        ToastService.ShowError(error);
    }

    ShowErrors = false;
}

<div class="wrapper">

    <div class="row">
        <div class="col-md-7 images">
            <div class="img-background">
                <img class="img-decoration" src="/images/registrationPage/clipart.svg" />
            </div>
        </div>

        <div class="col d-flex flex-column justify-content-center">
            <div class="brand">
                <img class="img-logo" src="/images/registrationPage/logo.svg" />
            </div>

            <h3>Enter your new password</h3>
            <br/>
            <div class="input_group mx-auto">
                <EditForm Model="model" OnValidSubmit="ConfirmPassword" class="">
                    <DataAnnotationsValidator />

                    <div class=" row">
                        <div class="col-md-10">
                            <InputText type="password" id="password" class="input_form" placeholder="Password*" @bind-Value="model.Password" />
                            <ValidationMessage For="@(() => model.Password)" />
                        </div>
                    </div>

                    <div class=" row">
                        <div class="col-md-10">
                            <InputText type="password" id="confirm" class="input_form" placeholder="Confirm Password*" @bind-Value="model.ConfirmPassword" />
                            <ValidationMessage For="@(() => model.ConfirmPassword)" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <button type="submit" class="button_logout">Reset password</button>
                        </div>
                    </div>

                </EditForm>
            </div>
        </div>
    </div>
</div>

@code{

    string email = string.Empty;
    string token = string.Empty;


    protected override void OnInitialized()
    {
        GetHttpParameters();

        model.Email = email;
        model.ResetToken = token;
    }

    public void GetHttpParameters()
    {
        var uriBuilder = new UriBuilder(NavigationManager.Uri);
        var httpQuery = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);

        email = httpQuery["email"] ?? string.Empty;
        token = httpQuery["token"] ?? string.Empty;
    }
}